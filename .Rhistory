install.packages("updateR")
# Loads the local curated data if the data is not there then it will download it
source("scripts/get_curatData.R")
# this script loads the packages and installing them if needed
source("scripts/load_packages.R")
# this script loads the packages and installing them if needed
source("scripts/load_packages.R")
# this script loads the functions into the space
source("scripts/my_scripts.R")
# Loads the local curated data if the data is not there then it will download it
source("scripts/get_curatData.R")
# These are go point for the analysis that takes the longest
beta.go <- TRUE
siamcat.go <- TRUE
# Label prefix for PDF that are generated
#labels editing of files
output.prefix <- "output/Covid19_"
#############################################
# Filtering of the curat dataset
# All of the pseq that are ever generated are stored within the mypseq.
mypseq <- list("raw.curat.pseq" = curat.pseq)
############################################
# define the year and the age
gbd.year <-"2020"
gbd.age <- "aged 70 or older"
# set colour theme
theme_set(theme_Sharmalab())
# Data input
# Input the Our World in Data
# Covid data set
data_hosp <- read.csv("~/Desktop/Covid_Curat.csv")
# AD Range of the graphs
hosp.range <- c(3416,5984109)
#### THIS IS THE HIGH AND LOW GROUPS THAT WILL BE USED THROUGHOUT THE SCRIPT
# loads the Our World in Data and relabels straight away.
covid.owid <- as.data.frame(data_hosp, col_names = TRUE) %>%
rename_all( tolower)  %>%
dplyr::select(location, hosp_patients)
# Covid groupings
curat.low <- c("FIN","USA","CAN","DNK","AUT","EST","NLD")
curat.high <- c("ESP", "ISR", "SWE", "SLV", "GBR", "FRA", "ITA")
# this are the countries that are dropped.
curat.drop <- c("BGD","ETH", "GHA", "HUN", "ISL", "LUX", "NOR", "SVK", "DEU", "FJI", "KAZ", "MDG", "CHN", "MNG", "PER", "RUS", "TZA", "IND")
mythres <- 1848.58
# Figure legends
disease <- "COVID-19"
# define the labels for the graphs generated
hosp.label <- "Hospitalised Patients on a given day"
grp.label <-"Disease group"
fig_title_gbm_combo <- "Figure 1"
fig_title_gbm_mgnify <- "Disease burden represented in the Curated microbiome data"
fig_title_alpha <- "Alpha Diversity for the Curated dataset"
fig_title_beta <- "Beta Diversity for the Curated dataset"
fig_title_abudance <- 'Abundance in the disease grouping in Curated microbiome dataset'
fig_title_permanova <- "PERMANOVA"
tab_title_gbm <- paste('Burden of ', disease)
gbm_ref <- "Our World in Data Study, 2020"
# runs the country prep script
# no pseq used
# runs the pseq recode script
#source("scripts/pseq_recode.R")
# CURATED DATA SET
# grabs the nationality from phyloseq
curat.covid.class <- get_variable(curat.pseq, "country" )
curat.covid.class <- fct_collapse(curat.covid.class, LOW = curat.low , HIGH = curat.high)
# reorder
curat.covid.class <- factor(curat.covid.class, levels = (c("LOW", "HIGH")))
# creates a CURATE COVID CLASS in the phyloseq
sample_data(curat.pseq)$curat.covid.class = curat.covid.class
# dropping the other countries
country <- get_variable(curat.pseq, "country" )
country <- droplevels(factor(country), curat.drop)
sample_data(curat.pseq)$country = country
# important to subset the data else it adds all of the ages up together
#a <- aggregate(Hosp_patients, subset(covid.owid.sub, age == gbd.age), mean)
#covid.owid.gg <- a
curatcountry <- as.data.frame(table(get_variable(curat.pseq, "country")))
curat.combined <- covid.owid
# RECODING OF VARIABLES
# creates a grouping variable for BMI
n <- length(sample_data(curat.pseq)$BMI)
data <- data.frame(id=1:n)
data$bmi <- sample_data(curat.pseq)$BMI # creates a new variable with BMI in it
# Classification based upon the ATlas data
data$bmi[data$bmi <18.5] <- "underweight"
data$bmi[data$bmi >=45] <- "super obese"
data$bmi[data$bmi >= 18.5 & data$bmi <25] <- "lean"
data$bmi[data$bmi >= 25 & data$bmi <30] <- "overweight"
data$bmi[data$bmi >= 30 & data$bmi <35] <- "obese"
data$bmi[data$bmi >= 35 & data$bmi <40] <- "severe obese"
data$bmi[data$bmi >= 40 & data$bmi <45] <- "morbid obese"
data$bmi <- factor(data$bmi)
# creates a new variable in the phyloseq called BMI
sample_data(curat.pseq)$bmi_group = data$bmi
# Check that it works
#get_variable(pseq, "bmi_group")
# same with gender -> sex
# creates a grouping varaible for BMI
n <- length(sample_data(curat.pseq)$gender)
data <- data.frame(id=1:n)
data$sex <- sample_data(curat.pseq)$gender # creates a new variable with gender in it
# Classification based upon the ATlas data
data$sex[data$sex == "female"] <- "female"
data$sex[data$sex == "male"] <- "male"
data$sex <- factor(data$sex)
# creates a new variable in the phyloseq called sex
sample_data(curat.pseq)$sex = data$sex
data <- data.frame(id=1:n)
mypseq[["curat.recode.pseq"]] <- curat.pseq
# Common variables to keep:  "age", "sex", "nationality", "bmi_group", "subject/subjectID", "mnd"
# sample_variables(pseq)
# sample_data(pseq)[c(2:16,18:96)] = NULL
#
# runs the pseq prep script # The output is; curat.combined.agestd & atlas.curat.combined.agestd
# curat.pseq & atlas.pseq that contains curat2atlas.mnd.class,curat.mnd.class &  atlas.mnd.class
#source("scripts/pseq_prep.R")
pseq_prep_1 <- function(curat.pseq,mypseq) {
# This script loads and then generates the dataframe required later on.
# It uses the classification from the main script.
# The output is; curat.combined.agestd & atlas.curat.combined.agestd
# curat.pseq & atlas.pseq that contains curat2atlas.mnd.class,curat.mnd.class &  atlas.mnd.class
# INPUTs
# curat.pseq
# atlas.pseq
# OUTPUTS
# atlas.pseq
# atlas.curat.combined.agestd
#"curat.pseq
#"curat.combined.agestd
# curat.combined
# Cleaning up the Taxa
message("Cleaning up the taxa")
taxa_names(curat.pseq) <- str_remove(taxa_names(curat.pseq), "s__")
taxa_names(curat.pseq) <- str_replace(taxa_names(curat.pseq), "_", " ")
# CURATED DATA SET
message("Working on the Curat data ")
# grabs the nationality from phyloseq
curat.covid.class <- get_variable(curat.pseq, "country" )
curat.covid.class <- fct_collapse(curat.covid.class, LOW = curat.low , HIGH = curat.high)
# reorder
curat.covid.class <- factor(curat.covid.class, levels = (c("LOW", "HIGH")))
# creates a CURATE COVID CLASS in the phyloseq
sample_data(curat.pseq)$curat.covid.class = curat.covid.class
message("Writing the countries into the Curat data")
# dropping the other countries
country <- get_variable(curat.pseq, "country" )
country <- droplevels(factor(country), curat.drop)
sample_data(curat.pseq)$country = country
# expected output
#atlas.mnd.class
#curat.mnd.class
# curat2atlas
# table(get_variable(atlas.pseq, "atlas.mnd.class"))
# table(get_variable(curat.pseq, "curat2atlas.mnd.class"))
# table(get_variable(curat.pseq, "curat.mnd.class"))
# table(get_variable(curat.pseq, "curat2atlas"))
# table(get_variable(curat.pseq, "country"))
# table(get_variable(atlas.pseq, "country"))
#
#
mypseq[["curat.recode.country.pseq"]] <- curat.pseq
message("Returning a list called mypseq \n that contains: \n curat.recode.country.pseq ")
return(mypseq)
}
mypseq <- pseq_prep_1(curat.pseq,mypseq)
#mydata_prep <- function(mypseq) {
# this accepts the list from the pseq_prep_2
message("The pseq being used are: \n curat.recode.country.pseq ")
curatcountry <- as.data.frame(table(get_variable( mypseq[["curat.recode.country.pseq"]], "curatcountry")))
# test
pseq_filter <- function(mypseq) {
# The output is;
# curat.pseq.comp.filte
# Relative abundance
curat.recode.country.comp.pseq <- microbiome::transform(mypseq[["curat.recode.country.pseq" ]], "compositional")
message("Coverting the data to relative abudance")
# Filtering based on filter.features for siamcat
# siamcat <- filter.features(siamcat, cutoff=1e-04, filter.method = 'abundance', feature.type = 'original')
# Filtered such that only OTUs with a mean greater than 1e-05 are kept.
curat.recode.country.comp.filter.pseq = filter_taxa(curat.recode.country.comp.pseq , function(x) mean(x) > 1e-04, TRUE)
#Relative population frequencies; at 1% compositional abundance threshold:
#prevalence(pseq.rel, detection = 1/100, sort = TRUE)
# the filtering is really important about relative and counts. Sdome are appropriate. Other are not.
# # Core
# keepotu = genefilter_sample(curat.recode.country.comp.pseq, filterfun_sample(topp(0.05)), A=5)
# pseq.f <- subset_taxa(curat.recode.country.comp.pseq, keepotu)
# pseq.f = subset_taxa(pseq.f, !is.na(Genus))
# plot_heatmap(pseq.f, method="PCoA", distance="bray")
#
# pseq.filt = subset_taxa(curat.recode.country.comp.pseq, keepotu & !is.na(Genus))
# plot_heatmap(pseq.filt, method="PCoA", distance="bray")
#
# sum(is.na(otu_table(physeqITS_DADA)))
# psmelt(physeqITS_DADA) %>%
#   filter(is.na(Abundance))
curat.recode.country.comp.core.pseq <- core(curat.recode.country.comp.pseq, detection = 0, prevalence = .5)
# Absolute population frequencies (sample count):
#prevalence(pseq.rel, detection = 1/100, sort = TRUE, count = TRUE)
curat.recode.country.filter.pseq = filter_taxa(mypseq[["curat.recode.country.pseq"]] , function(x) mean(x) > 1e-04, TRUE)
curat.recode.country.comp.core.filter.pseq <- core(curat.recode.country.filter.pseq, detection = 0, prevalence = .5)
#mypseq[["curat.recode.country.comp.core.filter.nNA.pseq"]] <- curat.recode.country.comp.core.filter.nNA.pseq
mypseq[["curat.recode.country.comp.core.filter.pseq"]] <- curat.recode.country.comp.core.filter.pseq
mypseq[["curat.recode.country.filter.pseq"]] <- curat.recode.country.filter.pseq
mypseq[["curat.recode.country.comp.filter.pseq"]] <- curat.recode.country.comp.filter.pseq
mypseq[["curat.recode.country.comp.core.pseq"]] <- curat.recode.country.comp.core.pseq
mypseq[["curat.recode.country.comp.pseq"]] <- curat.recode.country.comp.pseq
# This removes all of the additional covariates that are not required.
sample_data(mypseq[["curat.recode.country.filter.pseq"]])[c(2:3,6:16, 18, 20:95 )] = NULL
sample_data(mypseq[["curat.recode.country.comp.filter.pseq"]])[c(2:3,6:16, 18, 20:95 )] = NULL
sample_data(mypseq[["curat.recode.country.comp.pseq"]] )[c(2:3,6:16, 18, 20:95 )] = NULL
# This command lists them sample_variables(curat.pseq.comp.filter)
return(mypseq)
}
mypseq <- pseq_filter(mypseq)
mypseq <- pseq_filter(mypseq)
list2env(mypseq,envir=.GlobalEnv)
# ad.gbd.sub data is the output from the country_prep.R script
my.table.data <- covid.owid
# creates the data.frame from the GBD table based on year and age
#my.table.data <- my.table.data[my.table.data$year == gbd.year & my.table.data$age == gbd.age , ]
# removes other columns
#my.table.data <- dplyr::select (my.table.data, "location", "Prevalence", "Incidence", "DALY")
# gbm.table is a Sharmalab function. expects the levels. This produces the table in flextable format
owidc.table <- function(my.table.data,owidc.mean.levels) {
ft <-arrange(my.table.data, location)
ft <-ft %>% dplyr::rename(location = location)
ft <- flextable(ft) %>%
footnote( i = 1, j = 2:4,
value = as_paragraph(
c(gbm_ref)
),
ref_symbols = c("a"),
part = "header") %>%
colformat_num( j = 3:4, digits = 2) %>%
valign( valign = "bottom", part = "header") %>%
add_header_lines(values = c(tab_title_owidc) ) %>%
bold(part = "header") %>%
theme_booktabs() %>%
autofit() %>%
fix_border_issues()
return(ft)
}
ft <- owidc.table(my.table.data)
View(covid.owid)
View(data_hosp)
data_hosp[X] <- NULL
data_hosp[1] <- NULL
View(data_hosp)
#### THIS IS THE HIGH AND LOW GROUPS THAT WILL BE USED THROUGHOUT THE SCRIPT
# loads the Our World in Data and relabels straight away.
covid.owid <- as.data.frame(data_hosp, col_names = TRUE) %>%
rename_all( tolower)  %>%
dplyr::select(location, hosp_patients, aged_70_older, gdp_per_capita, human_development_index)
View(covid.owid)
my.table.data <- covid.owid
# gbm.table is a Sharmalab function. expects the levels. This produces the table in flextable format
ft <- gbm.table(my.table.data)
gbm.table <- function(my.table.data) {
ft <-arrange(my.table.data, location)
#ft <-ft %>% dplyr::rename(Country = location)
# creates the means
#ft.mean <-  summaryBy( . ~ Region, data = ft) %>%
#add_row()
#ft <- as_grouped_data(ft, groups = c("Region"))
# Tidy's up the data and renames and then inserts a column with Total
#ft.mean <-ft.mean %>%
#dplyr::rename(DALY = DALY.mean,Prevalence = Prevalence.mean, Incidence = Incidence.mean) %>%
# add_column( Country = "Mean", .after = 1)
# Intersts the rows. The number here are critical
#ft<- insertRows(ft, gbm.mean.levels, new = ft.mean, rcurrent = FALSE)
# this removes the country label for the means
#ft[gbm.mean.levels,1] <- ""
ft <- flextable(ft) %>%
footnote( i = 1, j = 3:5,
value = as_paragraph(
c(gbm_ref)
),
ref_symbols = c("a"),
part = "header") %>%
colformat_num( j = 3:5, digits = 2) %>%
valign( valign = "bottom", part = "header") %>%
add_header_lines(values = c(tab_title_gbm) ) %>%
bold(part = "header") %>%
#bold(i = gbm.mean.levels) %>%
theme_booktabs() %>%
autofit() %>%
fix_border_issues()
return(ft)
}
ft <- gbm.table(my.table.data)
ft
c1 <- ggplot(mydata), aes( area=Freq,fill=Hosp_patients, label = curat.label )) +
c1 <- ggplot(mydata) aes( area=Freq,fill=Hosp_patients, label = curat.label )) +
c1 <- ggplot(mydata)
c1 <- ggplot(covid.owid)
c1
c1 <- ggplot(covid.owid),aes( area=Freq,fill=Hosp_patients, label = curat.label )) +
c1 <- ggplot(covid.owid)aes( area=Freq,fill=Hosp_patients, label = curat.label ) +
c1 <- ggplot(covid.owid)aes( area=Freq,fill=Hosp_patients, label = curat.label )
c1 <- ggplot(covid.owid, aes( area=Freq,fill=Hosp_patients, label = curat.label )) +
geom_treemap() +
scale_fill_scico(palette = "buda", limit = daly.range)  +
geom_treemap_text( colour = "black", place = "centre", grow = FALSE) +
theme(legend.position="right")  +
labs(fill = mnd.daly.label )
c1 <- ggplot(covid.owid, aes( area=Freq,fill=Hosp_patients, label = curat.label )) +
geom_treemap() +
scale_fill_scico(palette = "buda", limit = covid.range)  +
geom_treemap_text( colour = "black", place = "centre", grow = FALSE) +
theme(legend.position="right")  +
labs(fill = mnd.daly.label )
c1 <- ggplot(covid.owid, aes( area=Freq,fill=Hosp_patients, label = curat.label )) +
geom_treemap() +
scale_fill_scico(palette = "buda", limit = hosp.range)  +
geom_treemap_text( colour = "black", place = "centre", grow = FALSE) +
theme(legend.position="right")  +
labs(fill = mnd.daly.label )
c1 <- ggplot(covid.owid, aes( area=Freq,fill=Hosp_patients, label = curat.label )) +
geom_treemap() +
scale_fill_scico(palette = "buda", limit = hosp.range)  +
geom_treemap_text( colour = "black", place = "centre", grow = FALSE) +
theme(legend.position="right")  +
labs(fill = hosp.label )
c1
knitr::opts_chunk$set(echo = TRUE)
# this script loads the packages and installing them if needed
source("scripts/load_packages.R")
# this script loads the functions into the space
source("scripts/my_scripts.R")
